
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CHAR COMMA DIVIDE ELSE EQ FLOAT FOR GT GTE ID IF INCLUDE INCLUDE_DIRECTIVE INT LBRACE LBRACKET LPAREN LT LTE MAIN MINUS MOD NEQ PLUS RBRACE RBRACKET RETURN RPAREN SEMI TIMES VOID WHILEinclude_statement : INCLUDE_DIRECTIVEfunction_declaration : type ID LPAREN params RPAREN LBRACE statements return_statement RBRACEparams : type ID\n              | type ID COMMA paramsreturn_statement : RETURN expression SEMI\n                        | RETURN SEMIstatements : statement statements\n                  | emptystatement : if_statement\n                 | declaration\n                 | expression_statement\n                 | while_statement\n                 | for_statement\n                 | function_call SEMIif_statement : IF LPAREN expression RPAREN LBRACE statements RBRACE\n                    | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEdeclaration : type ID SEMI\n                   | type ID ASSIGN expression SEMI\n                   | type ID LBRACKET INT RBRACKET SEMI\n                   | type ID LBRACKET INT RBRACKET ASSIGN LBRACE INT RBRACE SEMItype : INT\n            | CHAR\n            | FLOAT\n            | VOIDexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MOD expression\n                  | expression EQ expression\n                  | expression NEQ expression\n                  | expression LT expression\n                  | expression LTE expression\n                  | expression GT expression\n                  | expression GTE expression\n                  | LPAREN expression RPAREN\n                  | ID\n                  | INT\n                  | FLOAT\n                  | CHAR\n                  | function_callexpression_statement : expression SEMIwhile_statement : WHILE LPAREN expression RPAREN LBRACE statements RBRACEfor_statement : FOR LPAREN declaration expression_statement expression RPAREN LBRACE statements RBRACEfunction_call : ID LPAREN args RPARENargs : expression\n            | expression COMMA argsempty :'
    
_lr_action_items = {'INCLUDE_DIRECTIVE':([0,],[2,]),'$end':([1,2,],[0,-1,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'include_statement':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> include_statement","S'",1,None,None,None),
  ('include_statement -> INCLUDE_DIRECTIVE','include_statement',1,'p_include_statement','main.py',55),
  ('function_declaration -> type ID LPAREN params RPAREN LBRACE statements return_statement RBRACE','function_declaration',9,'p_function_declaration','main.py',62),
  ('params -> type ID','params',2,'p_params','main.py',67),
  ('params -> type ID COMMA params','params',4,'p_params','main.py',68),
  ('return_statement -> RETURN expression SEMI','return_statement',3,'p_return_statement','main.py',73),
  ('return_statement -> RETURN SEMI','return_statement',2,'p_return_statement','main.py',74),
  ('statements -> statement statements','statements',2,'p_statements','main.py',79),
  ('statements -> empty','statements',1,'p_statements','main.py',80),
  ('statement -> if_statement','statement',1,'p_statement','main.py',85),
  ('statement -> declaration','statement',1,'p_statement','main.py',86),
  ('statement -> expression_statement','statement',1,'p_statement','main.py',87),
  ('statement -> while_statement','statement',1,'p_statement','main.py',88),
  ('statement -> for_statement','statement',1,'p_statement','main.py',89),
  ('statement -> function_call SEMI','statement',2,'p_statement','main.py',90),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','if_statement',7,'p_if_statement','main.py',95),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_statement',11,'p_if_statement','main.py',96),
  ('declaration -> type ID SEMI','declaration',3,'p_declaration','main.py',101),
  ('declaration -> type ID ASSIGN expression SEMI','declaration',5,'p_declaration','main.py',102),
  ('declaration -> type ID LBRACKET INT RBRACKET SEMI','declaration',6,'p_declaration','main.py',103),
  ('declaration -> type ID LBRACKET INT RBRACKET ASSIGN LBRACE INT RBRACE SEMI','declaration',10,'p_declaration','main.py',104),
  ('type -> INT','type',1,'p_type','main.py',109),
  ('type -> CHAR','type',1,'p_type','main.py',110),
  ('type -> FLOAT','type',1,'p_type','main.py',111),
  ('type -> VOID','type',1,'p_type','main.py',112),
  ('expression -> expression PLUS expression','expression',3,'p_expression','main.py',117),
  ('expression -> expression MINUS expression','expression',3,'p_expression','main.py',118),
  ('expression -> expression TIMES expression','expression',3,'p_expression','main.py',119),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','main.py',120),
  ('expression -> expression MOD expression','expression',3,'p_expression','main.py',121),
  ('expression -> expression EQ expression','expression',3,'p_expression','main.py',122),
  ('expression -> expression NEQ expression','expression',3,'p_expression','main.py',123),
  ('expression -> expression LT expression','expression',3,'p_expression','main.py',124),
  ('expression -> expression LTE expression','expression',3,'p_expression','main.py',125),
  ('expression -> expression GT expression','expression',3,'p_expression','main.py',126),
  ('expression -> expression GTE expression','expression',3,'p_expression','main.py',127),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','main.py',128),
  ('expression -> ID','expression',1,'p_expression','main.py',129),
  ('expression -> INT','expression',1,'p_expression','main.py',130),
  ('expression -> FLOAT','expression',1,'p_expression','main.py',131),
  ('expression -> CHAR','expression',1,'p_expression','main.py',132),
  ('expression -> function_call','expression',1,'p_expression','main.py',133),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','main.py',138),
  ('while_statement -> WHILE LPAREN expression RPAREN LBRACE statements RBRACE','while_statement',7,'p_while_statement','main.py',143),
  ('for_statement -> FOR LPAREN declaration expression_statement expression RPAREN LBRACE statements RBRACE','for_statement',9,'p_for_statement','main.py',148),
  ('function_call -> ID LPAREN args RPAREN','function_call',4,'p_function_call','main.py',153),
  ('args -> expression','args',1,'p_args','main.py',158),
  ('args -> expression COMMA args','args',3,'p_args','main.py',159),
  ('empty -> <empty>','empty',0,'p_empty','main.py',164),
]
